I = vector.new(1,0,0)
J = vector.new(0,1,0)
K = vector.new(0,0,1)


-- Get location of computer using rednet
function getLocation()
    local loc = vector.new(gps.locate(5))
    if not loc then
        return true, nil
        -- We return error = true and loc = nil
    else
        return false, loc
    end
end

-- Get orientation of turtle (if localMode, 
-- then use the turtle's stored direction)
function getOrientation(localMode)
    
    if not turtle then
        return nil
        -- Computers don't have an orientation
    end

    if not localMode then
        local err, loc1 = getLocation()
        -- Now we'll move the turtle

        local delta_y = 0
        local loc2_ready = false
        -- We need to move the turtle to get a displacement vector to calculate orientation
        -- so we need to make sure that the turtle can move forward

        repeat
            if turtle.forward() then
                loc2_ready = true
            else
                if turtle.up() then
                    delta_y = delta_y + 1
                else 
                    if turtle.digUp() then
                        turtle.up()
                        delta_y = delta_y + 1
                    else
                        loc2_ready = true
                        -- We failed to find an opening to get orientation. Let's abort
                        -- At this point, if we want to improve the gps code, we'd tell the robot to return to
                        -- it's original position, then have it mine the block in front of it to create an opening.
                        -- We'd want to check to see if the block in front is valuable however...
                    end
                end
            end
        until loc2_ready

        if loc2_ready then
            err, loc2 = getLocation()
        else
            loc2 = loc1
            -- Something weird happened, let's abort.
        end

        -- Now move back down
        turtle.back()
        for i=1,delta_y,1 do
            turtle.down()
        end

        local disp = loc2 - loc1
        -- We don't care about the vertical component
        disp.y = 0

        print(disp)
        return disp
    else 
        -- This is localMode == true
        print(local_orientation)
        return local_orientation
    end
end

-- Initialize local_orientation vector
local_orientation = getOrientation(false)

-- Calculate the vector trajectory between destination from current location
function getTrajectory(dest)
    local err, loc = getLocation()
    if not err then
        return false, dest - loc
    else
        return true, vector.new(0,0,0)
        -- Don't send displacement if there is an error
    end
end

-- Rotate until turtle matches given orientation
function orientTurtle(direction, localMode)
    -- Let's make sure the direction vector is nonzero
    if direction:length() > 0 then
        if localMode then
            if not (direction:dot(local_orientation) > 0) then
                repeat
                    turtle.turnRight()
                    -- Rotate the orientation vector Ï€/2 radians in xz plane.
                    local x_prime = -1 * local_orientation.z
                    local z_prime =  local_orientation.x

                    local_orientation.x = x_prime
                    local_orientation.z = z_prime

                until (direction:dot(local_orientation) > 0)
            end
        else
            if not (direction:dot(getOrientation()) > 0) then
                repeat
                    turtle.turnRight()
                until (direction:dot(getOrientation()) > 0)
            end
        end
        local_orientation = direction
    end
end

-- Travel down trajectory vector
function traverseTrajectory(trajectory, breakBlocks)
    
    local dx = trajectory.x
    local dy = trajectory.y
    local dz = trajectory.z

    local sign_x = dx/math.abs(dx)
    local sign_y = dx/math.abs(dy)
    local sign_z = dx/math.abs(dz)

    print(sign_x)
    print(sign_y)
    print(sign_z)
    
    -- Move in x first
    if (dx ~= 0) then
        orientTurtle(I:mul(sign_x), true)
        for i = 1,math.abs(dx) do
            if not turtle.forward() then
                if breakBlocks then
                    turtle.dig()
                    turtle.forward()
                end
            end
        end
    end

    -- Move in z now
    if (dz ~= 0) then
        orientTurtle(K:mul(sign_z), true)
        for i = 1,math.abs(dz) do
            if not turtle.forward() then
                if breakBlocks then
                    turtle.dig()
                    turtle.forward()
                end
            end
        end
    end

    -- Move in y
    if (sign_y) > 0 then
        for i = 1,math.abs(dy) do
            if not turtle.up() then
                if breakBlocks then
                    turtle.digUp()
                    turtle.up()
                end
            end
        end
    elseif (sign_y) < 0 then
        for i = 1,math.abs(dy) do
            if not turtle.down() then
                if breakBlocks then
                    turtle.digDown()
                    turtle.down()
                end
            end
        end
    end
end

-- Go to location (takes a 3 vector for destination). Tolerance is the
-- maximum distance from destination allowed
function goto(destination, tolerance, breakBlocks)
    local trajectory = nil
    repeat
        err, trajectory = getTrajectory(destination)
        
        if not err then
            traverseTrajectory(trajectory, breakBlocks)
        else
            print('Failed to get trajectory, aborting goto to '.. trajectory:tostring())
            break
        end

    until trajectory:length() < tolerance
end



    


