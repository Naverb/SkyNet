local module = loadfile('/MWP/lib/module.lua')()
module.clear_module_cache()
local tsk = module.require('/MWP/lib/task3.lua')

testTask = nil
print(testTask)

local testTask = tsk.Task:new {
    name = 'Test',
    procedure = function()
        print('Entered testTask...')
        print(thisTask.name)

        promise = thisTask:requestPromise({
            questionData = {
                wow = 'Owen Wilson'
            },
            kind = 'Woah'
        })

        print(promise.kind)
        print('Yielding...')
        repeat
            thisTask:yield({promise})
        until promise.resolved
        print('Promise IS RESOLVED!')
        answer = promise.answerData
        promise.dataWasAccessed = true
        print(textutils.serialise(answer))
        response = coroutine.yield('Oh man', 'gee wiz')
        print('Got to the end')
        return thisTask:terminate("We're done buddy.")
    end
}

print('1')
ok,results = testTask:run()
if ok then
    print('OK')
else
    print('Not ok')
end

for k,v in pairs(results) do
    print(v)
    if type(v) == 'table' then
        print('Entered table')
        for k,v in pairs(v) do
            print(v)
        end
        print('Exited table')
    end
end
print('2')
for k,v in pairs(testTask.requiredPromises) do
    print(textutils.serialise(v.questionData))
    if v.kind == 'Woah' then
        v.answerData = {
            whoami = 'Carmen Sandiego'
        }
        v.resolved = true
    end
end
print('===')
ok,results = testTask:run()
if ok then
    print('OK')
else
    print('Not ok')
end

for k,v in pairs(results) do
    print(v)
    if type(v) == 'table' then
        print('Entered table')
        for k,v in pairs(v) do
            print(v)
        end
        print('Exited table')
    end
end
print('3')
for k,v in pairs(testTask.requiredPromises) do
    print(textutils.serialise(v.questionData))
    if v.kind == 'Woah' then
        v.answerData = {
            whoami = 'Carmen Sandiego'
        }
        v.resolved = true
    end
end
print('4')
ok, results = testTask:run()
if ok then
    print('OK')
    print(textutils.serialise(results))
else
    error(results)
end
