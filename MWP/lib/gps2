-- APIS
    os.loadAPI('SkyNet/MWP/lib/task')

-- Standard Vectors
    local I = vector.new(1,0,0)
    local J = vector.new(0,1,0)
    local K = vector.new(0,0,1)

-- Initialize local_orientation vector
local local_orientation

------------------------------------------------------
------------------ GET GPS INFO ----------------------

function getLocation()
    -- Get location of computer using rednet
    -- We note that gps.locate is based on the rednet API, which runs coroutine.yield.
    --  Hence, we tell the system to run this line without yielding (see task.noYield),
    --  because we do not want to yield all of getLocation() in the middle of a task.
    local loc = vector.new(task.noYield(gps.locate)(5))
    if not loc then
        return true, nil
        -- We return error = true and loc = nil
    else
        return false, loc
    end
end


function getOrientation(localMode)
    -- Get orientation of turtle (if localMode, 
    -- then use the turtle's stored direction)
    if not turtle then
        return nil
        -- Computers don't have an orientation
    end

    if not localMode then

        -- We yield here because non-local getOrientation requires fuel, so yielding allows a taskHandler
        -- to pass execution to a fuel checker listener if we want to.
        coroutine.yield('check_fuel')

        local err, loc1 = getLocation()
        -- Now we'll move the turtle

        local delta_y = 0
        local loc2_ready = false
        -- We need to move the turtle to get a displacement vector to calculate orientation
        -- so we need to make sure that the turtle can move forward

        repeat
            if turtle.forward() then
                loc2_ready = true
            else
                if turtle.up() then
                    delta_y = delta_y + 1
                else
                    if turtle.digUp() then
                        turtle.up()
                        delta_y = delta_y + 1
                    else
                        loc2_ready = true
                        -- We failed to find an opening to get orientation. Let's abort
                        -- At this point, if we want to improve the gps code, we'd tell the robot to return to
                        -- it's original position, then have it mine the block in front of it to create an opening.
                        -- We'd want to check to see if the block in front is valuable however...
                    end
                end
            end
        until loc2_ready

        if loc2_ready then
            err, loc2 = getLocation()
        else
            loc2 = loc1
            -- Something weird happened, let's abort.
        end

        -- Now move back down
        turtle.back()
        for i=1,delta_y,1 do
            turtle.down()
        end

        local disp = loc2 - loc1
        -- We don't care about the vertical component
        disp.y = 0

        return disp
    else
        -- This is localMode == true
        return local_orientation         ------- FIXME - Declared before defined in #96
    end
end

-- Set the initial value of the local_orientation vector
if not local_orientation then
    -- We check if local_orientation exists because OS.loadAPI appears to
    -- run this line each time loadAPI is called, and we only want to intialize
    -- local orientation once.
    local_orientation = getOrientation(false)
end


function getTrajectory(dest)
    -- Calculate the vector trajectory between destination from current location
    local err, loc = getLocation()
    if not err then
        return false, dest - loc
    else
        return true, vector.new(0,0,0)
        -- Don't send displacement if there is an error
    end
end



------------------------------------------------------
----------------- ORIENT TURTLE ----------------------

-- Rotate until turtle matches given orientation
function orientTurtle(direction, localMode)
    -- Let's make sure the direction vector is nonzero
    if direction:length() > 0 then
        if localMode then
            if not (direction:dot(local_orientation) > 0) then
                repeat
                    turtle.turnRight()
                    -- Rotate the orientation vector Ï€/2 radians in xz plane.
                    local x_prime = -1 * local_orientation.z
                    local z_prime =  local_orientation.x

                    local_orientation.x = x_prime
                    local_orientation.z = z_prime

                until (direction:dot(local_orientation) > 0)
            end
        else
            if not (direction:dot(getOrientation()) > 0) then
                repeat
                    turtle.turnRight()
                until (direction:dot(getOrientation()) > 0)
            end
        end
        local_orientation = direction
    end
end



