-- APIs
os.loadAPI('SkyNet/MWP/lib/task')
os.loadAPI('SkyNet/MWP/lib/movement/waypoint')
os.loadAPI('SkyNet/MWP/lib/act')

-- Let's create some basic properties of the path class
local path = {
    waypoints = {},
    name = '__proto__path',				-- FIXME? THIS LINE DOESN'T APPEAR TO BE UTILIZED
    append = function(self,waypoint)	-- FIXME: SHADOWING UPVALUE (waypoint) DEFINED ABOVE
                table.insert(self.waypoints,waypoint)
            end,
    pop = function(self)
                table.remove(self.waypoints)
            end,

    taskHandler = {},
    path_task_listener = {},

    start = function(self, tolerance, breakBlocks)

                self.currentWaypointNumber = 1
                self.taskHandler:start(tolerance, breakBlocks)

            end,
    disable = function(self)
                self.taskHandler.enabled = false
            end,
    enable = function(self)
                self.taskHandler.enabled = true
            end
}

function path:new(_name, _waypoints)


    local _path_task_listener = task.listener:new(
        --NAME
        _name,
        --CONDITION
        function (self)				-- FIXME: SHADOWING UPVALUE DEFINED ABOVE
            -- This allows us to disable the listener by merely disabling
            -- the path's taskHandler.
            return self.taskHandler.enabled
        end,
        --EXECUTETASK
        function (self, ...)		-- FIXME: SHADOWING UPVALUE DEFINED ABOVE
            -- We note that go function is sent to gps2, which yields after each block movement.
            self.waypoints[self.nextWaypointNumber]:go(...)
            self.nextWaypointNumber = self.nextWaypointNumber + 1
        end
    )

    local _taskHandler = task.taskHandler:new(
        --LISTENERS (there is only one listener in this case)
        {
            _name = _path_task_listener
        },
        --INTERMEDIATETASK
        function(self)				-- FIXME: SHADOWING UPVALUE DEFINED ABOVE
            -- We temporarily pass execution to the parent of the path.
            -- There, we can check if we need to refuel, etc.

            -- This right here uses the generic refuel listener to make sure we have sufficient fuel.
            act.GRL:listen()
            coroutine.yield()
        end,
        --NAME
        _name
    )

    local obj = {
        name = _name or "untitled_path",
        waypoints = _waypoints or {},
        -- If the path was paused, this is > 1.
        nextWaypointNumber = 1,
        path_task_listener = _path_task_listener,
        taskHandler = _taskHandler
    }
    setmetatable(obj,self)
    self.__index = self
    return obj
end




