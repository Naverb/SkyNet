
-- APIS
    os.loadAPI('SkyNet/MWP/lib/gps2')
    os.loadAPI('SkyNet/MWP/lib/waypoint')
    os.loadAPI('SkyNet/MWP/lib/task')

-- Waypoints
    local fuelingStation = waypoint.waypoint:new('fuelingStation', vector.new(-145,93,375))
    local storageDepot = waypoint.waypoint:new( 'storageDepot',vector.new(0,0,0) )



------------------------------------------------------
--------------------- FUEL ---------------------------

local function getFuel(self)

    if self.sufficientRange then
        -- We want to breakBlocks = true
        fuelingStation:go(1, true)

        for i=1,16 do
            local itemCount = turtle.getItemCount(i)
            if itemCount == 0 then
                turtle.select(i)
                break
            elseif i >= 16 and itemCount ~= 0 then
                turtle.select(16)
                turtle.dropDown()
            end
        end

        local err = turtle.suckDown(16)
        if not err then
            turtle.refuel(16)
            waypoint.previous_location:go(1, true)
        end

    else
        -- We probably want to write code to notify a turtle to bring fuel
        print('Insufficient fuel to return home. Difference: ' .. self.delta)
    end

end

local function refuelIfNecessary(self)
    local fuelRange = turtle.getFuelLevel()
    local err, displacementToStation = gps2.getTrajectory(fuelingStation.location)

    -- This is the distance in the blocks the turtle must travel to get to the fueling station
    local distanceToStation = math.abs(displacementToStation.x) + math.abs(displacementToStation.y) + math.abs(displacementToStation.z)

    if ( (fuelRange - distanceToStation) < 25 and (fuelRange - distanceToStation) > 0) then
        -- We return true because we need to go to the refuelling station
        self.sufficientRange = true
        return true
    elseif ( (fuelRange - distanceToStation) <= 0) then
        -- We don't have enough fuel to return home
        local delta = fuelRange - distanceToStation
        self.sufficientRange = false
        self.delta = delta
        return true
    end

    -- Unless we return true above, we have not reached a fueling station, so we return false.
    return false
end

function refuelListener:new(_name)
    local obj = task.listener:new(_name, refuelIfNecessary, getFuel)
    return obj
end

------------------------------------------------------
-------------------- STORAGE -------------------------

local function storeAllItems()
    storageDepot:go(1, false)

    for i = 1,16 do
        turtle.dropDown()
    end

    waypoint.previous_location:go(1,false)
end

local function storeAllItemsCondition() -- this code doesn't seem ideal to me -Brevan
    for i=1,16 do
        local itemCount = turtle.getItemCount(i)
        if itemCount == 0 then
            break
        elseif i >= 16 and itemCount ~= 0 then
            return true
        end
    end

    return false
end

function storageListener:new(_name)
    local obj = task.listener:new(_name, storeAllItemsCondition, storeAllItems)
    return obj
end
