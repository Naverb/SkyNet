os.loadAPI('SkyNet/MWP/lib/gps2')

-- These will be the coordinates of the fueling station
fuelingStation = vector.new(-145,92,375)

local function refuelIfNecessary()
    local fuelRange = turtle.getFuelLevel()
    local err, displacementToStation = gps2.getTrajectory(fuelingStation)
    -- This is the distance in the blocks the turtle must travel to get to the fueling station
    local distanceToStation = math.abs(displacementToStation.x) + math.abs(displacementToStation.y) + math.abs(displacementToStation.z)

    if ( (fuelRange - distanceToStation) < 25 and (fuelRange - distanceToStation) > 0)then
        -- We want to breakBlocks = true
        gps2.goto(fuelingStation, true)

        -- Now we write code here to check if any adjacent blocks have fuel


        -- We return true because we have reached the refuelling station (hopefully)
        return true
    elseif ( (fuelRange - distanceToStation) <= 0) then
        -- We don't have enough fuel to return home
        -- We probably want to write code to notify a turtle to bring fuel
        print('Insufficient fuel to return home. Difference: ' .. (fuelRange - distanceToStation))
    end

    -- Unless we return true above, we have not reached a fueling station, so we return false.
    return false
end

function refuelMonitor()
    repeat
        coroutine.yield() 
    until refuelIfNecessary()
end
