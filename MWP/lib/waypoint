-- APIS
	os.loadAPI("SkyNet/MWP/lib/gps2")

local waypoint = {
		updateLocation = function(self, newLocation)
			local err, loc = false, newLocation or gps2.getLocation()
			if not err then
				self.location = loc
			elseif err then
				self.err = true
			end
		end,

		go = function(self, tolerance, breakBlocks)
			print('Going to waypoint ' .. self.name)
			print(self.location)
			previous_location:updateLocation()		-- FIXME: Used before defined!
			gps2.goTo(self.location, breakBlocks, tolerance)
		end
}

function waypoint:new(_name, loc)
    --Lua constructors scare me.		-- They scare me to. -BREVAN
    local obj = {
        name = _name or 'untitled_waypoint',
        location = loc or vector.new(0,0,0),
        err = false
    }
    setmetatable(obj, self)
    self.__index = self
    return obj
end

-- We create this global variable so that we may work with the robot's prior location
local err, loc = gps2.getLocation()
if not err then
    previous_location = waypoint:new('Previous_Location', loc)
elseif err then
    previous_location = waypoint:new('Previous_Location', vector.new(0,0,0))
end

-- Let's create some basic properties of the path class
local path = {
    waypoints = {},
    name = '__proto__path',				-- FIXME? THIS LINE DOESN'T APPEAR TO BE UTILIZED
    append = function(self,waypoint)	-- FIXME: SHADOWING UPVALUE (waypoint) DEFINED ABOVE
                table.insert(self.waypoints,waypoint)
            end,
    pop = function(self)
                table.remove(self.waypoints)
            end,

    taskHandler = {},
    path_task_listener = {},

    start = function(self, tolerance, breakBlocks)

                self.currentWaypointNumber = 1
                self.taskHandler:start(tolerance, breakBlocks)

            end,
    disable = function(self)
                self.taskHandler.enabled = false
            end,
    enable = function(self)
                self.taskHandler.enabled = true
            end
}

function path:new(_name, _waypoints)


    local _path_task_listener = task.listener:new(

        _name,

        function (self)				-- FIXME: SHADOWING UPVALUE DEFINED ABOVE
            -- This allows us to disable the listener by merely disabling
            -- the path's taskHandler.
            return self.taskHandler.enabled
        end,

        function (self, ...)		-- FIXME: SHADOWING UPVALUE DEFINED ABOVE
            -- We note that go function is sent to gps2, which yields after each block movement.
            self.waypoints[self.nextWaypointNumber]:go(...)
            self.nextWaypointNumber = self.nextWaypointNumber + 1
        end
    )

    local _taskHandler = task.taskHandler:new(

        _path_task_listener,

        function(self)				-- FIXME: SHADOWING UPVALUE DEFINED ABOVE
            -- We temporarily pass execution to the parent of the path.
            -- There, we can check if we need to refuel, etc.
            coroutine.yield()
        end,

        _name
    )

    local obj = {
        name = _name or "untitled_path",
        waypoints = _waypoints or {},
        -- If the path was paused, this is > 1.
        nextWaypointNumber = 1,
        path_task_listener = _path_task_listener,
        taskHandler = _taskHandler
    }
    setmetatable(obj,self)
    self.__index = self
    return obj
end


