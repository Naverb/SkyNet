-- This api requires the gps api
local LIB_GPS_PATH = 'SkyNet/MWP/lib/gps2'
os.loadAPI(LIB_GPS_PATH)

waypoint = {
    updateLocation = function(self)
                        local err, loc = gps2.getLocation()
                        if not err then
                            self.location = loc
                        else
                            self.err = true
                        end
                    end,
    go = function(self, tolerance, breakBlocks)
                print('Going to waypoint ' .. self.name)
                print(self.location)
                previous_location:updateLocation()
                gps2.goto(self.location, breakBlocks, tolerance)
            end
}

function waypoint:new(_name, loc)
    --Lua constructors scare me.
    local obj = {
        name = _name or 'untitled_waypoint',
        location = loc or vector.new(0,0,0),
        err = false
    }
    setmetatable(obj, self)
    self.__index = self
    return obj
end

-- We create this global variable so that we may work with the robot's prior location
local err, loc = gps2.getLocation()
if not err then
    previous_location = waypoint:new('Previous_Location', loc)
else
    previous_location = waypoint:new('Previous_Location', vector.new(0,0,0))
end

-- Let's create some basic properties of the path class
path = {
    waypoints = {},
    name = '__proto__path',
    append = function(self,waypoint)
                table.insert(self.waypoints,waypoint)
            end,
    pop = function(self)
                table.remove(self.waypoints)
            end,
    start = function(self, tolerance, breakBlocks)

                print('Starting path ' .. self.name)
                self.currentWaypointNumber = 1

                local begin = function()

                    for i = self.currentWaypointNumber, #self.waypoints do
                        -- Now that we jumped to the latest waypoint, we are good
                        self.currentWaypointNumber = i + 1
                        -- We note that go function is sent to gps2, which yields after each block movement.
                        self.waypoints[i]:go(tolerance,breakBlocks)
                        print('Reached final waypoint of path ' .. self.name)
                    end
                    -- This is a coroutine, when we are done, we want to return something.
                    print('Exited the loop')
                    return 0

                end

                local stop = function()

                    local status = os.pullEvent('stop_' .. self.name)
                    if (status == 'stop_' .. self.name) then
                        -- This is a coroutine, when we are done, we want to return something.
                        return 0
                    else
                        coroutine.yield()
                    end

                end

                local pause = function()
                
                    local status = os.pullEvent('pause_' .. self.name)
                    if (status == 'pause_' .. self.name) then
                        self.currentWaypointNumber = 1
                        -- This is a coroutine, when we are done, we want to return something.
                        return 0
                    else
                        coroutine.yield()
                    end

                end

                -- This uses computercraft's parallel api to traverse the path of waypoints. 
                --  But if someone calls self.stop(), or self.pause(), then we're done.
                parallel.waitForAny(begin(),stop(),pause())

            end,
    stop = function(self)
                os.queueEvent('stop_' .. self.name)
            end,
    pause = function(self)
                os.queueEvent('pause_' .. self.name)
            end
}

function path:new(_name, _waypoints)
    local obj = {
        name = _name or "untitled_path",
        waypoints = _waypoints or {},
        -- If the path was paused, this is nonzero.
        currentWaypointNumber = 1
    }
    setmetatable(obj,self)
    self.__index = self
    return obj
end


